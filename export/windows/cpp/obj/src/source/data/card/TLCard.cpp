// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_source_data_card_TLCard
#include <source/data/card/TLCard.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24a7cf1f592748e7_18_new,"source.data.card.TLCard","new",0xa18c0667,"source.data.card.TLCard.new","data/card/TLCard.hx",18,0x8081259c)
HX_LOCAL_STACK_FRAME(_hx_pos_24a7cf1f592748e7_25_release,"source.data.card.TLCard","release",0xa146cb4e,"source.data.card.TLCard.release","data/card/TLCard.hx",25,0x8081259c)
namespace source{
namespace data{
namespace card{

void TLCard_obj::__construct(::String name,int year){
            	HX_STACKFRAME(&_hx_pos_24a7cf1f592748e7_18_new)
HXLINE(  19)		this->name = name;
HXLINE(  20)		this->year = year;
HXLINE(  21)		this->skin = null();
            	}

Dynamic TLCard_obj::__CreateEmpty() { return new TLCard_obj; }

void *TLCard_obj::_hx_vtable = 0;

Dynamic TLCard_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TLCard_obj > _hx_result = new TLCard_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TLCard_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1716817d;
}

void TLCard_obj::release(){
            	HX_STACKFRAME(&_hx_pos_24a7cf1f592748e7_25_release)
HXLINE(  26)		this->name = null();
HXLINE(  27)		this->year = (int)-1;
HXLINE(  28)		this->skin = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TLCard_obj,release,(void))


hx::ObjectPtr< TLCard_obj > TLCard_obj::__new(::String name,int year) {
	hx::ObjectPtr< TLCard_obj > __this = new TLCard_obj();
	__this->__construct(name,year);
	return __this;
}

hx::ObjectPtr< TLCard_obj > TLCard_obj::__alloc(hx::Ctx *_hx_ctx,::String name,int year) {
	TLCard_obj *__this = (TLCard_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TLCard_obj), true, "source.data.card.TLCard"));
	*(void **)__this = TLCard_obj::_hx_vtable;
	__this->__construct(name,year);
	return __this;
}

TLCard_obj::TLCard_obj()
{
}

void TLCard_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TLCard);
	HX_MARK_MEMBER_NAME(skin,"skin");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(year,"year");
	HX_MARK_END_CLASS();
}

void TLCard_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(skin,"skin");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(year,"year");
}

hx::Val TLCard_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { return hx::Val( skin); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"year") ) { return hx::Val( year); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"release") ) { return hx::Val( release_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TLCard_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"year") ) { year=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TLCard_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("year","\xbd","\xc9","\x47","\x50"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TLCard_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(TLCard_obj,skin),HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c")},
	{hx::fsString,(int)offsetof(TLCard_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(TLCard_obj,year),HX_HCSTRING("year","\xbd","\xc9","\x47","\x50")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TLCard_obj_sStaticStorageInfo = 0;
#endif

static ::String TLCard_obj_sMemberFields[] = {
	HX_HCSTRING("skin","\x7d","\x16","\x55","\x4c"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("year","\xbd","\xc9","\x47","\x50"),
	HX_HCSTRING("release","\xc7","\x85","\xed","\x58"),
	::String(null()) };

static void TLCard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TLCard_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TLCard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TLCard_obj::__mClass,"__mClass");
};

#endif

hx::Class TLCard_obj::__mClass;

void TLCard_obj::__register()
{
	hx::Object *dummy = new TLCard_obj;
	TLCard_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("source.data.card.TLCard","\xf5","\x46","\x89","\xec");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TLCard_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TLCard_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TLCard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TLCard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TLCard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TLCard_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace source
} // end namespace data
} // end namespace card
