// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_source_ui_skin_CardSkin
#include <source/ui/skin/CardSkin.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_38_new,"source.ui.skin.CardSkin","new",0xf247ee69,"source.ui.skin.CardSkin.new","ui/skin/CardSkin.hx",38,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_67_update,"source.ui.skin.CardSkin","update",0x1feb13a0,"source.ui.skin.CardSkin.update","ui/skin/CardSkin.hx",67,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_83_setText,"source.ui.skin.CardSkin","setText",0x427463f8,"source.ui.skin.CardSkin.setText","ui/skin/CardSkin.hx",83,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_90_updateTextPosition,"source.ui.skin.CardSkin","updateTextPosition",0x7d926e36,"source.ui.skin.CardSkin.updateTextPosition","ui/skin/CardSkin.hx",90,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_101_onMouseDown,"source.ui.skin.CardSkin","onMouseDown",0xcbc46311,"source.ui.skin.CardSkin.onMouseDown","ui/skin/CardSkin.hx",101,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_106_onMouseUp,"source.ui.skin.CardSkin","onMouseUp",0x733d774a,"source.ui.skin.CardSkin.onMouseUp","ui/skin/CardSkin.hx",106,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_110_startDrag,"source.ui.skin.CardSkin","startDrag",0xd683703f,"source.ui.skin.CardSkin.startDrag","ui/skin/CardSkin.hx",110,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_121_stopDrag,"source.ui.skin.CardSkin","stopDrag",0x5cbfd26d,"source.ui.skin.CardSkin.stopDrag","ui/skin/CardSkin.hx",121,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_130_onDrag,"source.ui.skin.CardSkin","onDrag",0x7ddfc24a,"source.ui.skin.CardSkin.onDrag","ui/skin/CardSkin.hx",130,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_157_flip,"source.ui.skin.CardSkin","flip",0x07643c84,"source.ui.skin.CardSkin.flip","ui/skin/CardSkin.hx",157,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_161_setVisible,"source.ui.skin.CardSkin","setVisible",0xd6b54207,"source.ui.skin.CardSkin.setVisible","ui/skin/CardSkin.hx",161,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_21_boot,"source.ui.skin.CardSkin","boot",0x04c1ae09,"source.ui.skin.CardSkin.boot","ui/skin/CardSkin.hx",21,0x67aedbda)
HX_LOCAL_STACK_FRAME(_hx_pos_b3cd26c63633a7bd_22_boot,"source.ui.skin.CardSkin","boot",0x04c1ae09,"source.ui.skin.CardSkin.boot","ui/skin/CardSkin.hx",22,0x67aedbda)
namespace source{
namespace ui{
namespace skin{

void CardSkin_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_38_new)
HXLINE(  39)		super::__construct((int)3);
HXLINE(  41)		this->m_background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  42)		this->m_background->makeGraphic(::source::ui::skin::CardSkin_obj::m_cardWidth,::source::ui::skin::CardSkin_obj::m_cardHeight,(int)-1,false,HX_("cardBackground",de,19,e6,71));
HXLINE(  44)		this->m_titleTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,HX_("",00,00,00,00),(int)16,null());
HXLINE(  45)		this->m_yearTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,HX_("",00,00,00,00),(int)16,null());
HXLINE(  47)		this->m_titleTxt->set_font(HX_("arial",43,99,88,25));
HXLINE(  48)		this->m_yearTxt->set_font(HX_("arial",43,99,88,25));
HXLINE(  50)		this->m_titleTxt->set_bold(true);
HXLINE(  51)		this->m_yearTxt->set_bold(true);
HXLINE(  53)		this->add(this->m_background);
HXLINE(  54)		this->add(this->m_titleTxt);
HXLINE(  55)		this->add(this->m_yearTxt);
HXLINE(  58)		this->setVisible(true);
HXLINE(  60)		this->depth = (int)0;
HXLINE(  62)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->m_background,this->onMouseDown_dyn(),this->onMouseUp_dyn(),null(),null(),null(),null(),null(),null());
            	}

Dynamic CardSkin_obj::__CreateEmpty() { return new CardSkin_obj; }

void *CardSkin_obj::_hx_vtable = 0;

Dynamic CardSkin_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CardSkin_obj > _hx_result = new CardSkin_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CardSkin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0ede2d9d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ede2d9d;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void CardSkin_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_67_update)
HXLINE(  68)		this->super::update(elapsed);
HXLINE(  70)		if (this->m_onDrag) {
HXLINE(  74)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)-1)) {
HXLINE(  75)				this->stopDrag();
            			}
HXLINE(  77)			this->onDrag();
HXLINE(  78)			this->updateTextPosition();
            		}
            	}


void CardSkin_obj::setText(::String name,::String year){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_83_setText)
HXLINE(  84)		this->m_titleTxt->set_text(name);
HXLINE(  85)		this->m_yearTxt->set_text(year);
HXLINE(  86)		this->updateTextPosition();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CardSkin_obj,setText,(void))

void CardSkin_obj::updateTextPosition(){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_90_updateTextPosition)
HXLINE(  91)		 ::flixel::text::FlxText _hx_tmp = this->m_titleTxt;
HXDLIN(  91)		Float _hx_tmp1 = this->m_background->x;
HXDLIN(  91)		Float _hx_tmp2 = (_hx_tmp1 + ((Float)this->m_background->get_width() / (Float)((Float)2.0)));
HXDLIN(  91)		_hx_tmp->set_x((_hx_tmp2 - ((Float)this->m_titleTxt->get_fieldWidth() / (Float)((Float)2.0))));
HXLINE(  92)		this->m_titleTxt->set_y(this->m_background->y);
HXLINE(  94)		 ::flixel::text::FlxText _hx_tmp3 = this->m_yearTxt;
HXDLIN(  94)		Float _hx_tmp4 = this->m_background->x;
HXDLIN(  94)		Float _hx_tmp5 = (_hx_tmp4 + ((Float)this->m_background->get_width() / (Float)((Float)2.0)));
HXDLIN(  94)		_hx_tmp3->set_x((_hx_tmp5 - ((Float)this->m_yearTxt->get_fieldWidth() / (Float)((Float)2.0))));
HXLINE(  95)		 ::flixel::text::FlxText _hx_tmp6 = this->m_yearTxt;
HXDLIN(  95)		Float _hx_tmp7 = this->m_background->y;
HXDLIN(  95)		Float _hx_tmp8 = (_hx_tmp7 + this->m_background->get_height());
HXDLIN(  95)		_hx_tmp6->set_y((_hx_tmp8 - this->m_yearTxt->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSkin_obj,updateTextPosition,(void))

void CardSkin_obj::onMouseDown( ::flixel::FlxSprite item){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_101_onMouseDown)
HXLINE( 101)		this->startDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardSkin_obj,onMouseDown,(void))

void CardSkin_obj::onMouseUp( ::flixel::FlxSprite item){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_106_onMouseUp)
HXLINE( 106)		this->stopDrag();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardSkin_obj,onMouseUp,(void))

void CardSkin_obj::startDrag(){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_110_startDrag)
HXLINE( 111)		if (this->m_onDrag) {
HXLINE( 112)			return;
            		}
HXLINE( 114)		this->m_onDrag = true;
HXLINE( 115)		int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 115)		this->m_mouseOffsetX = (_hx_tmp - hx::TCast< int >::cast(this->m_background->x));
HXLINE( 116)		int _hx_tmp1 = ::flixel::FlxG_obj::mouse->y;
HXDLIN( 116)		this->m_mouseOffsetY = (_hx_tmp1 - hx::TCast< int >::cast(this->m_background->y));
HXLINE( 117)		this->depth = (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSkin_obj,startDrag,(void))

void CardSkin_obj::stopDrag(){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_121_stopDrag)
HXLINE( 122)		if (!(this->m_onDrag)) {
HXLINE( 123)			return;
            		}
HXLINE( 125)		this->depth = (int)0;
HXLINE( 126)		this->m_onDrag = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSkin_obj,stopDrag,(void))

void CardSkin_obj::onDrag(){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_130_onDrag)
HXLINE( 131)		if (!(this->m_onDrag)) {
HXLINE( 132)			return;
            		}
HXLINE( 137)		 ::flixel::FlxSprite _hx_tmp = this->m_background;
HXDLIN( 137)		_hx_tmp->set_x((::flixel::FlxG_obj::mouse->x - this->m_mouseOffsetX));
HXLINE( 138)		 ::flixel::FlxSprite _hx_tmp1 = this->m_background;
HXDLIN( 138)		_hx_tmp1->set_y((::flixel::FlxG_obj::mouse->y - this->m_mouseOffsetY));
HXLINE( 140)		if ((this->m_background->x < (int)0)) {
HXLINE( 141)			this->m_background->set_x((int)0);
            		}
HXLINE( 143)		if ((this->m_background->y < (int)0)) {
HXLINE( 144)			this->m_background->set_y((int)0);
            		}
HXLINE( 146)		Float _hx_tmp2 = this->m_background->x;
HXDLIN( 146)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 146)		if ((_hx_tmp2 > (_hx_tmp3 - this->m_background->get_width()))) {
HXLINE( 147)			 ::flixel::FlxSprite _hx_tmp4 = this->m_background;
HXDLIN( 147)			int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN( 147)			_hx_tmp4->set_x((_hx_tmp5 - this->m_background->get_width()));
            		}
HXLINE( 150)		Float _hx_tmp6 = this->m_background->y;
HXDLIN( 150)		int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 150)		if ((_hx_tmp6 > (_hx_tmp7 - this->m_background->get_height()))) {
HXLINE( 151)			 ::flixel::FlxSprite _hx_tmp8 = this->m_background;
HXDLIN( 151)			int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 151)			_hx_tmp8->set_y((_hx_tmp9 - this->m_background->get_height()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSkin_obj,onDrag,(void))

void CardSkin_obj::flip(){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_157_flip)
HXLINE( 157)		this->setVisible(!(this->isVisible));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSkin_obj,flip,(void))

void CardSkin_obj::setVisible(bool vis){
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_161_setVisible)
HXLINE( 162)		this->isVisible = vis;
HXLINE( 163)		if (!(this->isVisible)) {
HXLINE( 165)			this->m_background->set_color((int)-8355712);
HXLINE( 167)			this->m_yearTxt->kill();
            		}
            		else {
HXLINE( 171)			this->m_background->set_color((int)-16776961);
HXLINE( 173)			this->m_yearTxt->revive();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardSkin_obj,setVisible,(void))

int CardSkin_obj::m_cardWidth;

int CardSkin_obj::m_cardHeight;


hx::ObjectPtr< CardSkin_obj > CardSkin_obj::__new() {
	hx::ObjectPtr< CardSkin_obj > __this = new CardSkin_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< CardSkin_obj > CardSkin_obj::__alloc(hx::Ctx *_hx_ctx) {
	CardSkin_obj *__this = (CardSkin_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CardSkin_obj), true, "source.ui.skin.CardSkin"));
	*(void **)__this = CardSkin_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CardSkin_obj::CardSkin_obj()
{
}

void CardSkin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CardSkin);
	HX_MARK_MEMBER_NAME(m_background,"m_background");
	HX_MARK_MEMBER_NAME(m_titleTxt,"m_titleTxt");
	HX_MARK_MEMBER_NAME(m_yearTxt,"m_yearTxt");
	HX_MARK_MEMBER_NAME(m_onDrag,"m_onDrag");
	HX_MARK_MEMBER_NAME(m_mouseOffsetX,"m_mouseOffsetX");
	HX_MARK_MEMBER_NAME(m_mouseOffsetY,"m_mouseOffsetY");
	HX_MARK_MEMBER_NAME(isVisible,"isVisible");
	HX_MARK_MEMBER_NAME(depth,"depth");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CardSkin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_background,"m_background");
	HX_VISIT_MEMBER_NAME(m_titleTxt,"m_titleTxt");
	HX_VISIT_MEMBER_NAME(m_yearTxt,"m_yearTxt");
	HX_VISIT_MEMBER_NAME(m_onDrag,"m_onDrag");
	HX_VISIT_MEMBER_NAME(m_mouseOffsetX,"m_mouseOffsetX");
	HX_VISIT_MEMBER_NAME(m_mouseOffsetY,"m_mouseOffsetY");
	HX_VISIT_MEMBER_NAME(isVisible,"isVisible");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CardSkin_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"flip") ) { return hx::Val( flip_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"onDrag") ) { return hx::Val( onDrag_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_onDrag") ) { return hx::Val( m_onDrag); }
		if (HX_FIELD_EQ(inName,"stopDrag") ) { return hx::Val( stopDrag_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_yearTxt") ) { return hx::Val( m_yearTxt); }
		if (HX_FIELD_EQ(inName,"isVisible") ) { return hx::Val( isVisible); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"startDrag") ) { return hx::Val( startDrag_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_titleTxt") ) { return hx::Val( m_titleTxt); }
		if (HX_FIELD_EQ(inName,"setVisible") ) { return hx::Val( setVisible_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_background") ) { return hx::Val( m_background); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_mouseOffsetX") ) { return hx::Val( m_mouseOffsetX); }
		if (HX_FIELD_EQ(inName,"m_mouseOffsetY") ) { return hx::Val( m_mouseOffsetY); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateTextPosition") ) { return hx::Val( updateTextPosition_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool CardSkin_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"m_cardWidth") ) { outValue = m_cardWidth; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_cardHeight") ) { outValue = m_cardHeight; return true; }
	}
	return false;
}

hx::Val CardSkin_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_onDrag") ) { m_onDrag=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_yearTxt") ) { m_yearTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isVisible") ) { isVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"m_titleTxt") ) { m_titleTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_background") ) { m_background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"m_mouseOffsetX") ) { m_mouseOffsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_mouseOffsetY") ) { m_mouseOffsetY=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CardSkin_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"m_cardWidth") ) { m_cardWidth=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"m_cardHeight") ) { m_cardHeight=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void CardSkin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_background","\xc0","\x0d","\x29","\xf7"));
	outFields->push(HX_HCSTRING("m_titleTxt","\x0a","\xa1","\x23","\xf4"));
	outFields->push(HX_HCSTRING("m_yearTxt","\xa1","\x5f","\xab","\x39"));
	outFields->push(HX_HCSTRING("m_onDrag","\x85","\xdd","\xeb","\xad"));
	outFields->push(HX_HCSTRING("m_mouseOffsetX","\x12","\x6c","\x45","\x7f"));
	outFields->push(HX_HCSTRING("m_mouseOffsetY","\x13","\x6c","\x45","\x7f"));
	outFields->push(HX_HCSTRING("isVisible","\xa8","\xf5","\x22","\xa7"));
	outFields->push(HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CardSkin_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CardSkin_obj,m_background),HX_HCSTRING("m_background","\xc0","\x0d","\x29","\xf7")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(CardSkin_obj,m_titleTxt),HX_HCSTRING("m_titleTxt","\x0a","\xa1","\x23","\xf4")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(CardSkin_obj,m_yearTxt),HX_HCSTRING("m_yearTxt","\xa1","\x5f","\xab","\x39")},
	{hx::fsBool,(int)offsetof(CardSkin_obj,m_onDrag),HX_HCSTRING("m_onDrag","\x85","\xdd","\xeb","\xad")},
	{hx::fsInt,(int)offsetof(CardSkin_obj,m_mouseOffsetX),HX_HCSTRING("m_mouseOffsetX","\x12","\x6c","\x45","\x7f")},
	{hx::fsInt,(int)offsetof(CardSkin_obj,m_mouseOffsetY),HX_HCSTRING("m_mouseOffsetY","\x13","\x6c","\x45","\x7f")},
	{hx::fsBool,(int)offsetof(CardSkin_obj,isVisible),HX_HCSTRING("isVisible","\xa8","\xf5","\x22","\xa7")},
	{hx::fsInt,(int)offsetof(CardSkin_obj,depth),HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CardSkin_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &CardSkin_obj::m_cardWidth,HX_HCSTRING("m_cardWidth","\x84","\x1c","\x9e","\x57")},
	{hx::fsInt,(void *) &CardSkin_obj::m_cardHeight,HX_HCSTRING("m_cardHeight","\xa9","\x4f","\x0a","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CardSkin_obj_sMemberFields[] = {
	HX_HCSTRING("m_background","\xc0","\x0d","\x29","\xf7"),
	HX_HCSTRING("m_titleTxt","\x0a","\xa1","\x23","\xf4"),
	HX_HCSTRING("m_yearTxt","\xa1","\x5f","\xab","\x39"),
	HX_HCSTRING("m_onDrag","\x85","\xdd","\xeb","\xad"),
	HX_HCSTRING("m_mouseOffsetX","\x12","\x6c","\x45","\x7f"),
	HX_HCSTRING("m_mouseOffsetY","\x13","\x6c","\x45","\x7f"),
	HX_HCSTRING("isVisible","\xa8","\xf5","\x22","\xa7"),
	HX_HCSTRING("depth","\x03","\xf1","\x29","\xd7"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setText","\x6f","\x0d","\x7e","\x12"),
	HX_HCSTRING("updateTextPosition","\x1f","\x5a","\x83","\x77"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("startDrag","\x76","\xa5","\x63","\xfb"),
	HX_HCSTRING("stopDrag","\x16","\x71","\x2a","\x95"),
	HX_HCSTRING("onDrag","\xb3","\x34","\xfa","\xe4"),
	HX_HCSTRING("flip","\xad","\x12","\xbe","\x43"),
	HX_HCSTRING("setVisible","\xf0","\x9c","\x03","\xf6"),
	::String(null()) };

static void CardSkin_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CardSkin_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CardSkin_obj::m_cardWidth,"m_cardWidth");
	HX_MARK_MEMBER_NAME(CardSkin_obj::m_cardHeight,"m_cardHeight");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CardSkin_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CardSkin_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CardSkin_obj::m_cardWidth,"m_cardWidth");
	HX_VISIT_MEMBER_NAME(CardSkin_obj::m_cardHeight,"m_cardHeight");
};

#endif

hx::Class CardSkin_obj::__mClass;

static ::String CardSkin_obj_sStaticFields[] = {
	HX_HCSTRING("m_cardWidth","\x84","\x1c","\x9e","\x57"),
	HX_HCSTRING("m_cardHeight","\xa9","\x4f","\x0a","\x09"),
	::String(null())
};

void CardSkin_obj::__register()
{
	hx::Object *dummy = new CardSkin_obj;
	CardSkin_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("source.ui.skin.CardSkin","\xf7","\x85","\x6c","\xaa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CardSkin_obj::__GetStatic;
	__mClass->mSetStaticField = &CardSkin_obj::__SetStatic;
	__mClass->mMarkFunc = CardSkin_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CardSkin_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CardSkin_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CardSkin_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CardSkin_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CardSkin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CardSkin_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CardSkin_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_21_boot)
HXLINE(  21)		m_cardWidth = (int)150;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b3cd26c63633a7bd_22_boot)
HXLINE(  22)		m_cardHeight = (int)200;
            	}
}

} // end namespace source
} // end namespace ui
} // end namespace skin
