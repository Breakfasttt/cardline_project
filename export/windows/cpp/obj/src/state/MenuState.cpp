// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_state_MenuState
#include <state/MenuState.h>
#endif
#ifndef INCLUDED_state_PlayState
#include <state/PlayState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_10a1a8d7ed89a755_9_new,"state.MenuState","new",0x222c3ea7,"state.MenuState.new","state/MenuState.hx",9,0x1119102a)
HX_LOCAL_STACK_FRAME(_hx_pos_10a1a8d7ed89a755_15_create,"state.MenuState","create",0xf59ddf15,"state.MenuState.create","state/MenuState.hx",15,0x1119102a)
HX_LOCAL_STACK_FRAME(_hx_pos_10a1a8d7ed89a755_31_update,"state.MenuState","update",0x0093fe22,"state.MenuState.update","state/MenuState.hx",31,0x1119102a)
HX_LOCAL_STACK_FRAME(_hx_pos_10a1a8d7ed89a755_36_onClickPlay,"state.MenuState","onClickPlay",0x41870a84,"state.MenuState.onClickPlay","state/MenuState.hx",36,0x1119102a)
namespace state{

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_10a1a8d7ed89a755_9_new)
HXLINE(   9)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x1e88d769) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1e88d769;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_10a1a8d7ed89a755_15_create)
HXLINE(  16)		this->super::create();
HXLINE(  18)		this->set_bgColor((int)-16744448);
HXLINE(  20)		this->m_playBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("play",f4,2d,5a,4a),this->onClickPlay_dyn());
HXLINE(  21)		this->m_playBtn->label->setFormat(null(),(int)18,null(),null(),null(),null(),null());
HXLINE(  22)		this->m_playBtn->setGraphicSize((int)200,(int)75);
HXLINE(  23)		this->m_playBtn->screenCenter(::flixel::util::FlxAxes_obj::XY_dyn());
HXLINE(  24)		this->add(this->m_playBtn);
            	}


void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_10a1a8d7ed89a755_31_update)
HXLINE(  31)		this->super::update(elapsed);
            	}


void MenuState_obj::onClickPlay(){
            	HX_GC_STACKFRAME(&_hx_pos_10a1a8d7ed89a755_36_onClickPlay)
HXLINE(  36)		 ::flixel::FlxState nextState =  ::state::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  36)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  36)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,onClickPlay,(void))


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "state.MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(m_playBtn,"m_playBtn");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_playBtn,"m_playBtn");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"m_playBtn") ) { return hx::Val( m_playBtn); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onClickPlay") ) { return hx::Val( onClickPlay_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MenuState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"m_playBtn") ) { m_playBtn=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("m_playBtn","\xb6","\x8b","\x7c","\x94"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(MenuState_obj,m_playBtn),HX_HCSTRING("m_playBtn","\xb6","\x8b","\x7c","\x94")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("m_playBtn","\xb6","\x8b","\x7c","\x94"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onClickPlay","\x3d","\x7d","\x9c","\x4b"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#endif

hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("state.MenuState","\x35","\x5f","\x18","\x82");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace state
