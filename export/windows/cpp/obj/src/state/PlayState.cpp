// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_data_card_CardsExtension
#include <data/card/CardsExtension.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_source_data_card_TLCard
#include <source/data/card/TLCard.h>
#endif
#ifndef INCLUDED_source_ui_skin_CardSkin
#include <source/ui/skin/CardSkin.h>
#endif
#ifndef INCLUDED_state_PlayState
#include <state/PlayState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_10_new,"state.PlayState","new",0x358823b2,"state.PlayState.new","state/PlayState.hx",10,0xe469d57f)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_18_create,"state.PlayState","create",0x924472ea,"state.PlayState.create","state/PlayState.hx",18,0xe469d57f)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_44_update,"state.PlayState","update",0x9d3a91f7,"state.PlayState.update","state/PlayState.hx",44,0xe469d57f)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_45_update,"state.PlayState","update",0x9d3a91f7,"state.PlayState.update","state/PlayState.hx",45,0xe469d57f)
static const int _hx_array_data_082422c0_5[] = {
	(int)82,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_60_sortCard,"state.PlayState","sortCard",0x1bb7dbbc,"state.PlayState.sortCard","state/PlayState.hx",60,0xe469d57f)
namespace state{

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_10_new)
HXLINE(  10)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x56188a2c;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_18_create)
HXLINE(  19)		this->super::create();
HXLINE(  21)		this->extentionTest =  ::data::card::CardsExtension_obj::__alloc( HX_CTX ,HX_("baseExtention",cd,b7,10,e6),HX_("baseExtention.json",69,d2,f7,28),HX_("assets/data/",f9,10,73,a0));
HXLINE(  22)		this->extentionTest->init();
HXLINE(  24)		this->test =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  25)		int totalCard = this->extentionTest->getNbrCard();
HXLINE(  27)		{
HXLINE(  27)			int _g1 = (int)0;
HXDLIN(  27)			int _g = totalCard;
HXDLIN(  27)			while((_g1 < _g)){
HXLINE(  27)				_g1 = (_g1 + (int)1);
HXDLIN(  27)				int i = (_g1 - (int)1);
HXLINE(  29)				 ::source::data::card::TLCard card = this->extentionTest->getTLCard(i);
HXLINE(  30)				if (hx::IsNull( card )) {
HXLINE(  31)					continue;
            				}
HXLINE(  33)				 ::source::ui::skin::CardSkin skin =  ::source::ui::skin::CardSkin_obj::__alloc( HX_CTX );
HXLINE(  34)				::String card1 = card->name;
HXDLIN(  34)				skin->setText(card1,::Std_obj::string(card->year));
HXLINE(  35)				this->test->add(skin).StaticCast<  ::source::ui::skin::CardSkin >();
            			}
            		}
HXLINE(  38)		this->add(this->test);
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_44_update)
HXLINE(  45)		{
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(2)
            			int _hx_run( ::source::ui::skin::CardSkin a2, ::source::ui::skin::CardSkin a3){
            				HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_45_update)
HXLINE(  45)				return f((int)-1,a2,a3);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  45)			 ::Dynamic f = this->sortCard_dyn();
HXDLIN(  45)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f));
HXDLIN(  45)			this->test->members->sort(_hx_tmp);
            		}
HXLINE(  47)		this->super::update(elapsed);
HXLINE(  49)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_082422c0_5,1),(int)2)) {
HXLINE(  52)			int rand = ::Std_obj::random(this->test->members->get_length());
HXLINE(  53)			Dynamic( this->test->members->__get(rand)).StaticCast<  ::source::ui::skin::CardSkin >()->flip();
            		}
            	}


int PlayState_obj::sortCard(int value, ::source::ui::skin::CardSkin card1, ::source::ui::skin::CardSkin card2){
            	HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_60_sortCard)
HXLINE(  60)		Float Value1 = card1->depth;
HXDLIN(  60)		Float Value2 = card2->depth;
HXDLIN(  60)		int result = (int)0;
HXDLIN(  60)		if ((Value1 < Value2)) {
HXLINE(  60)			result = value;
            		}
            		else {
HXLINE(  60)			if ((Value1 > Value2)) {
HXLINE(  60)				result = -(value);
            			}
            		}
HXDLIN(  60)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,sortCard,return )


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "state.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(extentionTest,"extentionTest");
	HX_MARK_MEMBER_NAME(test,"test");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(extentionTest,"extentionTest");
	HX_VISIT_MEMBER_NAME(test,"test");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"test") ) { return hx::Val( test); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sortCard") ) { return hx::Val( sortCard_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"extentionTest") ) { return hx::Val( extentionTest); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"test") ) { test=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"extentionTest") ) { extentionTest=inValue.Cast<  ::data::card::CardsExtension >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("extentionTest","\x90","\x25","\x3f","\x25"));
	outFields->push(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::data::card::CardsExtension*/ ,(int)offsetof(PlayState_obj,extentionTest),HX_HCSTRING("extentionTest","\x90","\x25","\x3f","\x25")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,test),HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("extentionTest","\x90","\x25","\x3f","\x25"),
	HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("sortCard","\x4e","\x78","\x35","\x45"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("state.PlayState","\xc0","\x22","\x24","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace state
