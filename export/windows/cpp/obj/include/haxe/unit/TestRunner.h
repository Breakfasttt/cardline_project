// Generated by Haxe 3.4.0
#ifndef INCLUDED_haxe_unit_TestRunner
#define INCLUDED_haxe_unit_TestRunner

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,unit,TestRunner)

namespace haxe{
namespace unit{


class HXCPP_CLASS_ATTRIBUTES TestRunner_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestRunner_obj OBJ_;
		TestRunner_obj();

	public:
		enum { _hx_ClassId = 0x496c1fac };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.unit.TestRunner")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe.unit.TestRunner"); }

		hx::ObjectPtr< TestRunner_obj > __new() {
			hx::ObjectPtr< TestRunner_obj > __this = new TestRunner_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< TestRunner_obj > __alloc(hx::Ctx *_hx_ctx) {
			TestRunner_obj *__this = (TestRunner_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TestRunner_obj), false, "haxe.unit.TestRunner"));
			*(void **)__this = TestRunner_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestRunner_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TestRunner","\x02","\x94","\x3f","\x4b"); }

		static void __boot();
		static ::Dynamic print;
		static inline ::Dynamic &print_dyn() {return print; }

};

} // end namespace haxe
} // end namespace unit

#endif /* INCLUDED_haxe_unit_TestRunner */ 
